component lathe_jog;
/*
Copyright: 2019
Author:  Mit Zot

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

pin in bit jog_rapid;
pin in bit jog_zp;
pin in bit jog_zm;
pin in bit jog_xm;
pin in bit jog_xp;
pin in bit hwheel_x;
pin in bit hwheel_z;

pin in bit inc10;
pin in bit inc100;

pin in bit is_g95;
pin in bit spindle_on;

pin in signed spindle_count;
pin in signed hwheel_count_x;
pin in signed hwheel_count_z;

pin in float feed;
pin in float override;


pin in float jog_rapid_feed;
pin in float jog_feed;
pin in unsigned spindle_counts_per_rev;

pin in bit abort;

pin out signed jog_z_count;
pin out signed jog_x_count;
pin out float jog_scale_x;
pin out float jog_scale_z;
pin out bit set_manual;

pin out float hwheel_increment;

variable int32_t spindle_count_old;
variable uint32_t spindle_count_diff;
variable int32_t hwheel_count_old_x;
variable uint32_t hwheel_count_diff_x;
variable int32_t hwheel_count_old_z;
variable uint32_t hwheel_count_diff_z;


function _;
license "GPL";
;;


#define TICKS_MINUTE (60*1000)  //1kHz servo-thread

FUNCTION(_){
	spindle_count_diff = abs(spindle_count - spindle_count_old);
	spindle_count_old  = spindle_count;
    hwheel_count_diff_x  = hwheel_count_x - hwheel_count_old_x;
	hwheel_count_old_x   = hwheel_count_x;
    hwheel_count_diff_z  = hwheel_count_z - hwheel_count_old_z;
	hwheel_count_old_z   = hwheel_count_z;

    if(inc100)      hwheel_increment=0.1/4.0;
    else if(inc10)  hwheel_increment=0.01/4.0;
    else            hwheel_increment=0.001/4.0;

    if( jog_rapid || !is_g95 || !spindle_on){  //rapid jog or G94
	    if(jog_rapid) jog_scale_z = (jog_rapid_feed * override) / TICKS_MINUTE;
        else          jog_scale_z = (jog_feed * override) / TICKS_MINUTE;
        jog_scale_x = jog_scale_z / 2;

	    if(jog_zp)jog_z_count += 1;
	    if(jog_zm)jog_z_count -= 1;
	    if(jog_xp)jog_x_count += 1;
	    if(jog_xm)jog_x_count -= 1;
     }
     else if (is_g95 && spindle_on) { //G95 feed per rev
	    jog_scale_z= (feed * override) / spindle_counts_per_rev;
        jog_scale_x = jog_scale_z / 2;

	    if(jog_zp && !jog_zm)jog_z_count += spindle_count_diff;
	    if(jog_zm && !jog_zp)jog_z_count -= spindle_count_diff;
	    if(jog_xp && !jog_xm)jog_x_count += spindle_count_diff;
	    if(jog_xm && !jog_xp)jog_x_count -= spindle_count_diff;
     }//else rapid

        if(hwheel_x && (!jog_rapid && !jog_xp && !jog_xm)){
	      jog_scale_x=hwheel_increment/2;  //diameter
        }

        if(hwheel_z && (!jog_rapid && !jog_zp && !jog_zm)){
	      jog_scale_z=hwheel_increment;
        }

	 if(!(jog_zp || jog_zm) )jog_z_count+=hwheel_count_diff_z;
	 if(!(jog_xp || jog_xm) )jog_x_count+=hwheel_count_diff_x;

     set_manual=jog_zp || jog_zm || jog_xp || jog_xm || abort || jog_rapid;
}//FUNCTION
