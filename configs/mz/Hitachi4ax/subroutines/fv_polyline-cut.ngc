
(CALL surface, depth, compensation, cut dir, show final cut, close)
o<fv_polyline-cut> sub

	(Assign significative names to params passed)
		#<cut_start>	= #1
		#<cut_depth>	= #2
		#<comp>			= #3
		#<cut-dir>		= #4 (1 = natural, -1 = reverse)
		#<show_final>	= #5
		#<close>		= #6

	(Check validity of params passed)
		o<poly-depth-valid-1> if [#<cut_depth> GT 0] 
			#<cut_depth> = [0 - #<cut_depth>]
		o<poly-depth-valid-1> endif

		o<poly-depth-valid-2> if [#<cut_depth> GE #<cut_start>]
			(debug,Polyline: bad cut_depth - EXITING)
			(print,Polyline: bad cut_depth - EXITING)
			(AXIS,notify,Polyline: bad cut_depth - EXITING)
			M2
		o<poly-depth-valid-2> endif
	(end validity check)	

;(print, )		
;(print,begin cut)

	(pre-processing)
		#<_cut_to:seg_z> = #<cut_start>

		#<final_loop> = 1
		#<final_loop_to_do> = 1
		/ #<show_final> = [#<show_final> + 10]
	
		F#<_ffeed>
		S#<_spindle_rpm>
		
		o<entry> if [#<close>]
			G0 X#49 Y#50 (line begin)
		o<entry> else
			G0 X#59 Y#60 (line begin)		
		o<entry> endif
		
;	o<fv_entry-angle> call [#54] [#55] [#53] [#54] [#55] [#56] [3] [2] [#<cut_start>]

	(end pre-processing)
	
	(loop to depth)
		o<cut-to-depth> while [[#<_cut_to:seg_z> GT #<cut_depth>] OR #<final_loop> OR #<show_final>]
		
			o<wh010-final> if [#<_cut_to:seg_z> GT #<cut_depth>]
				#<_cut_to:loop_end_z> = [#<_cut_to:seg_z> + #<_depth_step>]
				o<wh-if1> if [#<_cut_to:loop_end_z> LT #<cut_depth>]
					#<_cut_to:loop_end_z> = #<cut_depth>
				o<wh-if1> endif
	
				o<poly_plunge> if [#<_plunge_down> OR [#<close> EQ 0]]
					F#<_vertical_feed>
					G1 Z#<_cut_to:loop_end_z>
					#<_cut_to:seg_z> = #<_cut_to:loop_end_z>
					F#<_ffeed>
				o<poly_plunge> endif
			o<wh010-final> else
				#<final_loop> = 0
				o<final_seg> if [#<final_loop_to_do>]
					#<final_loop_to_do> = -1
				o<final_seg> endif
				F#<_final_feed>
				S#<_final_spindle_rpm>
			o<wh010-final> endif
			
			#<edge> = 0

		(loop for segments)
			o<poly-do-segments> while [#<edge> LE #<_polyline-index-no>]
			
			(set variables as per cut dir)
				#<offset>	= [14 * #<edge>]
				
				#<p-len>	= #[48 + #<offset>]	(length)
				#<px-e>		= #[49 + #<offset>]	(effective end)
				#<py-e>		= #[50 + #<offset>]	(effective end)
	
				(values and apexes of new line)
				#<cs>		= #[53 + #<offset>]	(corner style, 0..3)
				#<dir-c>	= #[55 + #<offset>]	(direction of corner, 2 or 3)
				#<len-c>	= #[56 + #<offset>]	(length of arc, chamfer or none)
				#<cx>		= #[57 + #<offset>]	(center of arc)
				#<cy>		= #[58 + #<offset>]	(center of arc)

				#<x-b>		= #[59 + #<offset>]	(effective line begin)
				#<y-b>		= #[60 + #<offset>]	(effective line begin)

				#<len>		= #[62 + #<offset>]	(length of straight segment)
				#<x-e>		= #[63 + #<offset>]	(effective end)
				#<y-e>		= #[64 + #<offset>]	(effective end)
		
				#<i>		= [#<cx> - #<px-e>]
				#<j>		= [#<cy> - #<py-e>]
				
				#<len> = 1
				#<len-c> = 0.5
	
;(print, )
;(print,edge = #<edge>)

			(do the cut)				
				o<poly-do-cut> if [#<cs> EQ 1] (chamfer)
					o<fv_cut-to> CALL [#<x-b>] [#<y-b>] [#<len-c>]
;(print,corner style = #<cs>  corner end x = #<x-b>  corner end y = #<y-b>)
				o<poly-do-cut> elseif [[#<cs> EQ 2] OR [#<cs> EQ 3]] (rounded or inverted)
;(print,corner style = #<cs>  corner end x = #<x-b>  corner end y = #<y-b>)
					o<fv_cut-to> CALL [#<x-b>] [#<y-b>] [#<len-c>] [#<dir-c>] [#<i>] [#<j>]
				o<poly-do-cut> endif

				o<fv_cut-to> CALL [#<x-e>] [#<y-e>] [#<len>]				
;(print,   end-x = #<x-e>  end-y = #<y-e>)
				#<edge> = [#<edge> + 1]
				
			o<poly-do-segments> endwhile	
			
			o<not-closed> if [#<close> EQ 0]
				G0 Z#<_z_clear>
				G0 X#59 Y#60
				G0 Z[#<_cut_to:loop_end_z> + 0.01]
			o<not-closed> endif
			
			o<final_seg-0> if [#<final_loop_to_do> EQ -1]
				#<final_loop_to_do> = 0
;				o<fv_cut-to> CALL [#<_final:x>] [#<_final:y>] [#5410] [1]
			o<final_seg-0> endif
		
			(Draw reference lines)
			o<show_final_cut> if [#<final_loop> EQ 0]
				o<show_final_cut-1> if [#<_show_final_cuts> AND [#<show_final> EQ 11] AND #<_show_bottom_cut>] 
					G40
					o<not-closed-001> if [#<close> EQ 0]
						G0 X#59 Y#60
					o<not-closed-001> else
						G0 X#49 Y#50 (previous line end)
					o<not-closed-001> endif
					#<show_final> = 8
				o<show_final_cut-1> elseif [#<_show_final_cuts> AND [#<show_final> EQ 11] OR [#<show_final> EQ 8]]
					#<_cut_to:seg_z> = #<cut_start>
					#<cut_depth> = #<cut_start>
					#<_cut_to:loop_end_z> = #<cut_start>
					G40
					o<not-closed-002> if [#<close> EQ 0]
						G0 X#59 Y#60
					o<not-closed-002> else
						G0 X#49 Y#50 (previous line end)
					o<not-closed-002> endif
					G0 Z#<cut_start>				
					#<show_final> = 1
				o<show_final_cut-1> else
					#<show_final> = 0
				o<show_final_cut-1> endif	
			o<show_final_cut> endif					
		(end loop for segments)
		
		o<cut-to-depth> endwhile
	(end loop for depth)
	
	G0 Z#<_z_clear>
	G40	
	
;(print,end cut)
o<fv_polyline-cut> end sub
