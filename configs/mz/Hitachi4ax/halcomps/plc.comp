component plc "PLC for Hitachi";
/*
Copyright: 2018
Author:  Mit Zot

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// ---INPUTS---
pin in bit   machine_on;   
   
pin in bit     sw_j1;
pin in bit     sw_j2;
pin in bit     sw_j4;
pin in bit     sw_i1;
pin in bit     sw_i100;

pin in bit     whb_j1;
pin in bit     whb_j2;
pin in bit     whb_j3;
pin in bit     whb_j4;
pin in float   whb_inc;
pin in bit     whb_spin_start;
pin in bit     whb_spin_stop;
pin in bit     whb_reset;
pin in bit     whb_nc_start;
pin in bit     whb_nc_stop;

pin in s32     whb_mpg;
pin in s32     hw_mpg;
pin out s32    mpg_cnts;

pin in bit     sw_spin_start;
pin in bit     sw_spin_stop;
pin in bit     sw_nc_start;
pin in bit     sw_nc_stop;
pin in bit     sw_reset;

pin out bit    reset;
pin out bit    start;
pin out bit    stop;
pin out bit    spin_start;
pin out bit    spin_stop;

pin in bit     sw_flood_auto;
pin in bit     sw_flood_off;
pin in bit     flood_is_on;
pin in bit     sp_stndstill;
pin in bit     tuncl;

pin in float   feed;
pin in float   ovr;

pin in float afovr;
pin in float asovr;

pin in bit     abort;

// ---PARAMS---
pin in float    t_lube_interval;  //
pin in float    t_lube_time;      //


//  ---OUTPUTS---
pin out bit    lube;          //

pin out bit j1;
pin out bit j2;
pin out bit j3;
pin out bit j4;

pin out float inc;
pin out float jogspeed;

pin out bit    flood;
pin out bit    ytuncl;
pin out signed fovr;
pin out signed sovr;


function _;
license "GPL"; // indicates GPL v2 or later
;;



typedef struct {
        float T;
        float ET;
        bool IN; 
        bool OUT;
} timer;


static timer lube_interval   = {.T = 1500, .ET = 0, .OUT = false, .IN = false};
static timer lube_time       = {.T = 2, .ET = 0, .OUT = false, .IN = false};
static timer t_tuncl         = {.T = 1, .ET = 0, .OUT = false, .IN = false}; 


static bool first=1;
static bool msg_fp[8]={0};
static bool abort_fp=0;

int i;


void iec_ton(timer *t, float fper){
   if(t->IN) t->ET += fper;
   else      t->ET = 0.0; 
   if(t->ET >= t->T){
      t->ET = t->T;
      t->OUT = true;
   }
   else t->OUT = false;
}



FUNCTION(_){
     if(first){
      first=0;
      lube_interval.T = t_lube_interval;
      lube_time.T = t_lube_time;
     }//first cycle

     lube_time.IN = !lube_interval.OUT && machine_on;
     lube_interval.IN = lube_time.OUT;
     lube = !lube_time.OUT && machine_on;

     
     reset = sw_reset || whb_reset;
     stop = sw_nc_stop || whb_nc_stop;
     start = (sw_nc_start || whb_nc_start)  && !stop;
     spin_stop = sw_spin_stop || whb_spin_stop;
     spin_start = (sw_spin_start || whb_spin_start) && !spin_stop;
     
     
     if(!(whb_j1 || whb_j2 || whb_j3 || whb_j4))
     {
         j1 =  sw_j1 && !sw_j2 && !sw_j4;
         j2 = !sw_j1 &&  sw_j2 && !sw_j4;
         j3 =  sw_j1 &&  sw_j2 && !sw_j4;
         j4 = !sw_j1 && !sw_j2 &&  sw_j4;
         
         if(!sw_i1 &&  sw_i100)     inc=0.1;
         else if(!sw_i1 && !sw_i100)inc=0.01;
         else                       inc=0.001;
     }
     else
     {
        j1 = whb_j1;
        j2 = whb_j2;
        j3 = whb_j3;
        j4 = whb_j4;
        inc = whb_inc;
     }
     
     mpg_cnts = whb_mpg + hw_mpg;

     jogspeed = feed * ovr;

     if(0){
       rtapi_print_msg(RTAPI_MSG_ERR, "X SERVO MOTOR OVERHEATED!\n");
       msg_fp[1]=1;
     }
     if (abort && !abort_fp)for(i=0;i<8;i++)msg_fp[i]=0; 
     abort_fp=abort;
     
  
     fovr=afovr*16.0;
     sovr=asovr*10.0 + 25;

     ytuncl = t_tuncl.OUT && tuncl;
     t_tuncl.IN = sp_stndstill;

     iec_ton(&lube_interval, fperiod);  //call "function blocks"
     iec_ton(&lube_time, fperiod);
     iec_ton(&t_tuncl, fperiod);

}//FUNCTION     


