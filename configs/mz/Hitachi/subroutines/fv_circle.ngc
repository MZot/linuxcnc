(info: fv_circle: modified helix, in/out/pocket, cw/ccw, D-shape)
o<fv_circle> sub (CALL [#<delx>] [#<delx>] [#<diam>] [#flat] [#rot] [#cut_opt] [#dir] [#cut_start] [#depth] [#show_final])

	(Assign significative names to params passed)
	#<final_cx>   =  #1 (x center)
	#<final_cy>   =  #2 (y center)
	#<final_rad>  =  [#3 / 2] (diameter / 2)
	#<final_flat> =  #4 (d flat)
	#<rot>        =  #5 (flat angle)
	#<cut_opt>    =  #6 (Inside=0:Outside=1:On the line=2:Create a pocket=3)
	#<dir>	      =  #7 (Clockwise=2:Counter-Clockwise=3)
	#<cut_start>  =  #8
	#<cut_depth>  =  #9
	#<show_final> = #10

	(Check validity of params passed)
	o<l00> if [#<final_rad> EQ 0]
	    (debug,Circle: bad diameter #<dia> - EXITING)
	    (print,Circle: bad diameter #<dia> - EXITING)
	    (AXIS,notify,Circle: diameter #<dia> - EXITING)
	    M2
	o<l00> endif

	o<l02> if [#<cut_depth> EQ 0.0]
	    (debug,Circle: bad cut_depth #<cut_depth> - EXITING)
	    (print,Circle: bad cut_depth #<cut_depth> - EXITING)
	    (AXIS,notify,Circle: bad cut_depth - EXITING)
		M2
	o<l02> else if [#<cut_depth> GT 0.0]
	 	#<cut_depth> = [0 - #<cut_depth>]           
	o<l02> endif
	(end validity check)
	
	o<pocket> if [[#<cut_opt> EQ 3] AND [#5410 GT 0] AND [#<final_rad> GT #5410]] (...a pocket and tool dia > 0)
		o<has-flat-0> if [#<final_flat> GT 0]
			#<cycle_count> = FUP[#<final_rad> / #5410 * 2 / #<_pocket_ratio>]
		o<has-flat-0> else
			#<cycle_count> = FUP[#<final_rad> / #5410 / #<_pocket_ratio>]
		o<has-flat-0> endif
		#<min_rad> = [#<_pocket_ratio> * #5410]
	o<pocket> else
		#<cycle_count> = 1
	o<pocket> endif
	
	#<cycle> = 0		
	o<wh_cycle> while [#<cycle> LT #<cycle_count>]
	
		o<wh_cycle-0> if [#<cycle> EQ #<cycle_count> - 1]
			#<radius> = #<final_rad>
			#<flat> = #<final_flat>
			#<cx> = #<final_cx>
			#<cy> = #<final_cy>
		o<wh_cycle-0> else
			#<radius> = [#<min_rad> + [#<final_rad> - #<min_rad>] * #<cycle> / [#<cycle_count> - 1]]
			o<has-flat> if [#<final_flat> GT 0]		
				#<cx> = [#<final_cx> - #<final_rad> + #<radius>]
				o<rotate-xy> CALL [#<cx>] [#<final_cy>] [#<final_cx>] [#<final_cy>] [#<rot>]
					#<cx> = #<_rotate_result_x>
					#<cy> = #<_rotate_result_y>
				#<flat> = [[#<radius> - #<final_rad>] * 2 + #<final_flat>]
				o<has-flat-2> if [#<flat> LT 0]
					#<flat> = 0
				o<has-flat-2> endif
			o<has-flat> else
				#<cx> = #<final_cx>
				#<cy> = #<final_cy>
				#<flat> = #<final_flat>
			o<has-flat> endif
		o<wh_cycle-0> endif	 
		
		#<cycle> = [#<cycle> + 1]

	 	(to avoid gouging, start point is arc opposite flat)
	 	(start point x0,y0 and vector to center vx0,vy0)
	 	#<x1>  = [#<cx> + #<radius> * cos[#<rot> + 180]]
	 	#<y1>  = [#<cy> + #<radius> * sin[#<rot> + 180]]
	 	#<vx12> =        [#<radius> * cos[#<rot>]]
	 	#<vy12> =        [#<radius> * sin[#<rot>]]
	 	
	 	#<d2>  =  ACOS[[#<radius> - #<flat>] / #<radius>]
		(points at the ends of the arc)
		(x1,y1 start point of flat, vx1,vy1 vector to center)
		(x2,y2 start point of flat, vx2,vy2 vector to center)
		o<l08> if [#<dir> EQ 2] (cw)
			#<x2>  = [#<cx> + #<radius> * cos[#<rot> + #<d2>]]
			#<y2>  = [#<cy> + #<radius> * sin[#<rot> + #<d2>]]

			#<x3>  = [#<cx> + #<radius> * cos[#<rot> - #<d2>]]
			#<y3>  = [#<cy> + #<radius> * sin[#<rot> - #<d2>]]
			#<vx31> =        [#<radius> * cos[#<rot> - #<d2> + 180]]
			#<vy31> =        [#<radius> * sin[#<rot> - #<d2> + 180]]
		o<l08> else
			#<x2>  = [#<cx> + #<radius> * cos[#<rot> - #<d2>]]
			#<y2>  = [#<cy> + #<radius> * sin[#<rot> - #<d2>]]

			#<x3>  = [#<cx> + #<radius> * cos[#<rot> + #<d2>]]
			#<y3>  = [#<cy> + #<radius> * sin[#<rot> + #<d2>]]
			#<vx31> =        [#<radius> * cos[#<rot> + #<d2> + 180]]
			#<vy31> =        [#<radius> * sin[#<rot> + #<d2> + 180]]
		o<l08> endif

		o<len_calc> if [#<cut_opt> EQ 1] (outside)
			#<len_arc> = [[#<radius> + #5410 / 2] * 3.141592 * [180 - #<d2>] / 180]
		o<len_calc> elseif [#<cut_opt> EQ 2] (on line)
			#<len_arc> = [#<radius> * 3.141592 * [180 - #<d2>] / 180]
		o<len_calc> else ( Inside or a pocket )
			#<len_arc> = [[#<radius> - #5410 / 2] * 3.141592 * [180 - #<d2>] / 180]
		o<len_calc> endif

		(this is not exactly right for in or out but should never cause a problem)
		#<len_cord> = [#<radius> * SIN[#<d2>] * 2]
		
		#<final_loop> = 1
		o<will_show_final> if [#<cycle> EQ #<cycle_count>]
			/ #<show_final> = [#10 + 10]
		o<will_show_final> else
			#<show_final> = 0
		o<will_show_final> endif
		
		F#<_ffeed>
		S#<_spindle_rpm>
		#<_cut_to:seg_z> = #<cut_start>
				
		o<fv_entry-arc> call [#<x1>] [#<y1>] [#<cx>] [#<cy>] [#<dir>] [#<cut_opt>] [#<cut_start>]		

		o<wh010> while [[#<_cut_to:seg_z> GT #<cut_depth>] OR #<final_loop> OR #<show_final>]
		
			o<wh010-final> if [#<_cut_to:seg_z> GT #<cut_depth>]
				#<_cut_to:loop_end_z> = [#<_cut_to:seg_z> + #<_depth_step>]
				o<wh-if1> if [#<_cut_to:loop_end_z> LT #<cut_depth>]
					#<_cut_to:loop_end_z> = #<cut_depth>
				o<wh-if1> endif
		
				o<oval_plunge> if [#<_plunge_down>]
					F#<_vertical_feed>
					G1 Z#<_cut_to:loop_end_z>
					#<_cut_to:seg_z> = #<_cut_to:loop_end_z>
					F#<_ffeed>
				o<oval_plunge> endif
			o<wh010-final> else
				#<final_loop> = 0
				F#<_final_feed>
				S#<_final_spindle_rpm>
			o<wh010-final> endif
		
			o<fv_cut-to> CALL [#<x2>] [#<y2>] [#<len_arc>] [#<dir>] [#<vx12>] [#<vy12>]
	  		o<fv_cut-to> CALL [#<x3>] [#<y3>] [#<len_cord>]
			o<fv_cut-to> CALL [#<x1>] [#<y1>] [#<len_arc>] [#<dir>] [#<vx31>] [#<vy31>]
		
			(Draw reference lines)			
			o<show_final_cut> if [#<final_loop> EQ 0]
				o<show_final_cut-1> if [#<_show_final_cuts> AND [#<show_final> EQ 11] AND #<_show_bottom_cut>] 
					G40
					G0 X#<x1> Y#<y1>
					#<show_final> = 8
				o<show_final_cut-1> elseif [#<_show_final_cuts> AND [#<show_final> EQ 11] OR [#<show_final> EQ 8]]
					#<_cut_to:seg_z> = #<cut_start>
					#<cut_depth> = #<cut_start>
					#<_cut_to:loop_end_z> = #<cut_start>
					G40
					G0 X#<x1> Y#<y1>
					G0 Z#<cut_start>				
					#<show_final> = 1
				o<show_final_cut-1> else
					#<show_final> = 0
				o<show_final_cut-1> endif	
			o<show_final_cut> endif		
		o<wh010> endwhile
	
	o<wh_cycle> endwhile
	
	G0 Z#<_z_clear>
	G40

o<fv_circle> endsub
