#!/usr/bin/python

"""
    engrave-feature.py G-Code Text Engraving Generator

    (C) Mit Zot <2018>  <fixer at linuxcnc.org forum>
    
    Should be called from ncam.py. 
    It can generate multiline engraving, text on arc, text can be rotated by an angle, 
    width and height of text scaled independently. Arcs in font are converted to
    straight line segments. You can set the anglular distance between those segments with parameter approxAngle.
    Parameters X, Y, text height, width scale, rotation angle, arc radius, 
    arc start angle, safe Z, engraving Z, rapid Z can be passed as G-code parameters (strings).
    Uses QCAD3 cxf font format.

    Added sorting alghoritm for line segments and some sanity checks in Gcode. Text mirroring still not corectly implemented.

    based upon code from engrave-lines
    (C) ArcEye <2012>  <arceye at mgware dot co dot uk>
    
    based upon code from engrave11.py
    Copyright (C) <2008>  <Lawrence Glaister> <ve7it at shaw dot ca>
                     based on work by John Thornton  -- GUI framwork from arcbuddy.py
                     Ben Lipkowitz  (fenn)-- cxf2cnc.py v0.5 font parsing code

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""




from Tkinter import *
from math import *
import os
import re
import sys
import string
import getopt
import math

String = ""
SafeZ = 100
XStart = 0
XLineOffset = 0
XIndentList = ""
YStart = 0
YLineOffset = 0
Depth = 0.1
XScale = 1
YScale = 1
CSpaceP = 0.25
WSpaceP = 1.00
Angle = 0
Mirror = 0
Flip = 0
Preamble = "G17 G21 G40 G90"
Postamble = "M2"
arcAngle = 0
arcRadius = 0
referencedBy = 0
typeOfEngraving = 0
textAlign = 0
approxAngle = 20.0
Xref = 0
Yref = 0
font_line_height = 9
font_word_space = 6
font_char_space = 2
charHeight = 10
charWidth = 1
arcAngle = 0
rapidZ = 1
firstMove = True
verticalFeed = '100'
feed = '250'
CutStartZ = '.5'
self_id='engra'

lineWidths = []
lineOffsets = []

stringlist = []

#=======================================================================
class Character:
    def __init__(self, key):
        self.key = key
        self.stroke_list = []

    def __repr__(self):
        return "%s" % (self.stroke_list)

    def get_xmax(self):
        try: return max([s.xmax for s in self.stroke_list[:]])
        except ValueError: return 0

    def get_ymax(self):
        try: return max([s.ymax for s in self.stroke_list[:]])
        except ValueError: return 0



#=======================================================================
class Line:

    def __init__(self, coords):
        self.xstart, self.ystart, self.xend, self.yend = coords
        self.xmax = max(self.xstart, self.xend)
        self.ymax = max(self.ystart, self.yend)

    def __repr__(self):
        return "Line([%s, %s, %s, %s])" % (self.xstart, self.ystart, self.xend, self.yend)

def reverse(m):
  return Line([m.xend, m.yend, m.xstart, m.ystart])

def sortstrokes(strokes):
   #return strokes
   sorted=[]
   sorted=strokes
   for j,st in enumerate(strokes):
     swapped = False
     dsmin=99
     demin=99
     dsi=0
     dei=0
     for i,stroke in enumerate(sorted[j+1:]):
         ds=abs(math.sqrt((sorted[j].xend - stroke.xstart)**2 + (sorted[j].yend - stroke.ystart)**2))
         de=abs(math.sqrt((sorted[j].xend - stroke.xend)**2 + (sorted[j].yend - stroke.yend)**2))
         if (dsmin>ds):
           dsmin=ds
           dsi=i+j+1
           swapped = True   
         if (demin>de):
           demin=de
           dei=i+j+1
           swapped = True    
     if swapped:  
        if dsmin <= demin:    
          m=(sorted[dsi])
          sorted[dsi]=(sorted[j+1])
          sorted[j+1]=m
        else:
          m=(sorted[dei])
          sorted[dei]=(sorted[j+1])
          sorted[j+1]=reverse(m)
   return sorted



#=======================================================================
# This routine parses the .cxf font file and builds a font dictionary of
# line segment strokes required to cut each character.
# Arcs (only used in some fonts) are converted to a number of line
# segemnts based on the angular length of the arc. Since the idea of
# this font description is to make it support independant x and y scaling,
# we can not use native arcs in the gcode.
#=======================================================================
def parse(file):
    global approxAngle
    font = {}
    key = None
    num_cmds = 0
    cmds_read = 0
    line_num = 0
    work=False
    for text in file:
        # format for a typical letter (lowercase r):
        # #comment, with a blank line after it
        #
        # [r] 3
        # L 0,0,0,6
        # L 0,6,2,6
        # A 2,5,1,0,90
        #
         
        line_num += 1
        end_char = re.match('^$', text)  # blank line
        if end_char and key:  # save the character to our dictionary
            font[key] = Character(key)
            #sys.stdout.write( ";key:%s\n\r" % key.encode("utf-8"))
            if work:  #key in stringlist[0]:
             font[key].stroke_list = sortstrokes(stroke_list)
            else:
             font[key].stroke_list = stroke_list
            font[key].xmax = xmax

        new_cmd = re.match('^\[(.*)\]\s(.*)', text)  # changed for qcad3 fonts
        if new_cmd:  # new character
            try:
              key = new_cmd.group(2).decode("utf-8")  # group(2) is char, group(1) is char code in HEX
            except Exception:
              print (";(uncomplete char def)")
            work=False
            for s in stringlist: 
               if key in s or key=='A':
                 work=True
                 break;
            cmds_read = 0
            stroke_list = []
            xmax, ymax = 0, 0

        line_cmd = re.match('^L (.*)', text)
        if line_cmd and work:
            cmds_read += 1
            coords = line_cmd.group(1)
            coords = [float(n) for n in coords.split(',')]
            stroke_list += [Line(coords)]
            xmax = max(xmax, coords[0], coords[2])

        arc_cmd = re.match('^A (.*)', text)
        if arc_cmd and work:
            cmds_read += 1
            coords = arc_cmd.group(1).rstrip(',')
            coords = [float(n) for n in coords.split(',')]
            xcenter, ycenter, radius, start_angle, end_angle = coords
            # since font defn has arcs as ccw, we need some font foo
            if (end_angle < start_angle):
                start_angle -= 360.0
            # approximate arc with line seg
            segs = int((end_angle - start_angle) / approxAngle) + 1
            angleincr = (end_angle - start_angle) / segs
            xstart = cos(start_angle * pi / 180) * radius + xcenter
            ystart = sin(start_angle * pi / 180) * radius + ycenter
            angle = start_angle
            for i in range(segs):
                angle += angleincr
                xend = cos(angle * pi / 180) * radius + xcenter
                yend = sin(angle * pi / 180) * radius + ycenter
                coords = [xstart, ystart, xend, yend]
                stroke_list += [Line(coords)]
                xmax = max(xmax, coords[0], coords[2])
                ymax = max(ymax, coords[1], coords[3])
                xstart = xend
                ystart = yend
    return font


#=======================================================================

def __init__(key):
    key = key
    stroke_list = []

def __repr__():
    return "%s" % (stroke_list)

def get_xmax():
    try: return max([s.xmax for s in stroke_list[:]])
    except ValueError: return 0

def get_ymax():
    try: return max([s.ymax for s in stroke_list[:]])
    except ValueError: return 0



#=======================================================================


def __init__(coords):
    xstart, ystart, xend, yend = coords
    xmax = max(xstart, xend)
    ymax = max(ystart, yend)

def __repr__():
    return "Line([%s, %s, %s, %s])" % (xstart, ystart, xend, yend)


#=======================================================================
def sanitize(string):
    retval = ''
    good = ' ~!@#$%^&*_+=-{}[]|\:;"<>,./?'
    for char in string:
        if char.isalnum() or good.find(char) != -1:
            retval += char
        else: retval += (' 0x%02X ' % ord(char))
    return retval

#=======================================================================
# routine takes an x and a y in raw internal format
# x and y scales are applied and then x,y pt is rotated by angle
# Returns new x,y tuple
def Rotn(x, y, xscale, yscale, angle):
    Deg2Rad = 2.0 * pi / 360.0
    xx = x * xscale
    yy = y * yscale
    rad = sqrt(xx * xx + yy * yy)
    theta = atan2(yy, xx)
    newx = rad * cos(theta + angle * Deg2Rad)
    newy = rad * sin(theta + angle * Deg2Rad)
    return newx, newy



#=======================================================================

def code(arg, visit, last):

    global SafeZ
    global XStart
    global XLineOffset
    global XIndentList
    global YStart
    global YLineOffset
    global Depth
    global XScale
    global YScale
    global CSpaceP
    global WSpaceP
    global Angle
    global Mirror
    global Flip
    global Preamble
    global Postamble
    global stringlist
    global font_line_height
    global font_word_space
    global font_char_space
    global typeOfEngraving
    global charHeight
    global charWidth
    global arcAngle
    global rapidZ
    global verticalFeed
    global feed
    global firstMove
    global self_id
    String = arg

    str1 = ""
    # erase old gcode as needed
    gcode = []

    oldx = oldy = -99990.0


    if visit != 0:
        # all we need is new X and Y for subsequent lines

        gcode.append(";(===================================================================)")
        gcode.append(';( Engraving: "%s" )' % (String.encode("utf-8")))
        gcode.append(';( Line %d )' % (visit))
        gcode.append("(===================================================================)")

    else:
        gcode.append(';( Code generated by engrave-feature.py )')
        gcode.append(';( Fontfile: %s )\n' % (fontfile))
        
        gcode.append(' o<%s_001>if[ %s GT %s ] ' % (self_id,rapidZ,SafeZ) )
        gcode.append("      (DEBUG, warning: Safe Z value too low)")
        gcode.append("      o<%s_0011> if [#<_task> ]\n                  M30\n            o<%s_0011> endif" %(self_id,self_id))
        gcode.append(' o<%s_001>endif ' % self_id)
        gcode.append(' o<%s_002>if[ %s GT %s ] ' %(self_id,CutStartZ,rapidZ) )
        gcode.append("      (DEBUG, warning: Rapid Z value too low)")
        gcode.append("      o<%s_0021> if [#<_task> ]\n                  M30\n            o<%s_0021> endif" %(self_id,self_id))
        gcode.append(' o<%s_002>endif )'%(self_id))
        gcode.append(' o<%s_003>if[ %s GT %s ] ' %(self_id,Depth,CutStartZ) )
        gcode.append("      (DEBUG, warning: Cut start Z value too low)")
        gcode.append("      o<%s_0031> if [#<_task> ]\n                  M30\n            o<%s_0031> endif" %(self_id,self_id))
        gcode.append(' o<%s_003>endif \n'%(self_id))
       
        gcode.append(';( Engraving: "%s")' % (String.encode("utf-8")))
        gcode.append(';( Line %d )' % (visit))

        gcode.append(Preamble)
        gcode.append('F#%s' %feed)
        gcode.append('#<YScale> = [%s / %f]' % (charHeight, font_line_height))
        gcode.append('#<XScale> = [#<YScale> * %s]' % charWidth)
        gcode.append('o<rotate-xy> CALL [%f * #<XScale>] [%f * #<YScale>] [%f] [%f] [%s]' % (Xref, -Yref , 0, 0, Angle))  # rotate start point
        gcode.append('#<xref> = #<_rotate_result_x>')
        gcode.append('#<yref> = #<_rotate_result_y>')

        gcode.append('M3')

    if firstMove == True:  # very first move
        gcode.append('G0 Z%s' % (SafeZ))
    gcode.append('#<xr> = 0')
    gcode.append('#<yr> = 0')


    xoffset = lineOffsets[visit]  # distance along raw string in font units

    # calc a plot scale so we can show about first 15 chars of string
    # in the preview window
    PlotScale = 15 * font['A'].get_xmax() * XScale / 150

    for char in String:
        if char == ' ':
            xoffset += font_word_space
            continue
        try:

            char_width = font[char].get_xmax()
            gcode.append(";(character '%s')" % (char.encode("utf-8")))
            if typeOfEngraving == 1:  # text on arc CW                #fi = (arcLenth * 180)/(pi * arcRadius)
                    gcode.append('#<fi> = [360 - [[[%f * #<XScale>] + #<xref>] * 180] / [3.14159265359 * [%s - [%f * #<YScale>]]]]' % ((xoffset), arcRadius, ((font_line_height * YLineOffset * (visit)))))  # startpoint angle of character on arc
                    gcode.append('#<fi_char> = [[%f * #<XScale> * 180] / [3.14159265359 * [%s - [%f * #<YScale>]]]]' % ((char_width / 2), arcRadius, ((font_line_height * YLineOffset * (visit)))))  # correction of char angle, so it is tangent to arc
                    gcode.append('o<rotate-xy> CALL [[%s - %f * #<YScale>]] [0] [0] [0] [%s + #<fi>]' % (arcRadius, ((font_line_height * YLineOffset * (visit))), arcAngle))  # set start point on arc
                    gcode.append('#<xr> = #<_rotate_result_x>')
                    gcode.append('#<yr> = #<_rotate_result_y>')
            if typeOfEngraving == 2:  # text on arc CCW
                    gcode.append('#<fi> = [[[[%f * #<XScale>] + #<xref>] * 180] / [3.14159265359 * [%s - [%f]]]]' % ((xoffset), arcRadius, (font_line_height * YLineOffset * (visit))))  # startpoint angle of character on arc
                    gcode.append('#<fi_char> = [180 - [%f * #<XScale> * 180] / [3.14159265359 * [%s - [%f]]]]' % ((char_width / 2), arcRadius, (font_line_height * YLineOffset * (visit))))  # correction of char angle, so it is tangent to arc
                    gcode.append('o<rotate-xy> CALL [[%s - %f * #<YScale>]] [0] [0] [0] [%s + #<fi>]' % (arcRadius, (font_line_height * YLineOffset * (visit)), arcAngle))  # set start point on arc
                    gcode.append('#<xr> = #<_rotate_result_x>')
                    gcode.append('#<yr> = #<_rotate_result_y>')


            first_stroke = True
            for stroke in font[char].stroke_list:
#               gcode.append("(%f,%f to %f,%f)" %(stroke.xstart,stroke.ystart,stroke.xend,stroke.yend ))
                dx = oldx - stroke.xstart
                dy = oldy - stroke.ystart
                dist = sqrt(dx * dx + dy * dy)

                x1 = stroke.xstart
                y1 = stroke.ystart
                if Mirror == 1:
                    x1 = char_width - x1
                if Flip == 1:
                    y1 = font_line_height - y1
                if typeOfEngraving == 0:  # normal text, for text on arc it is calculated above, in G-Code
                        x1 += xoffset
                        y1 -= (visit * (font_line_height * YLineOffset))



                # check and see if we need to move to a new discontinuous start point
                if (dist > 0.01) or first_stroke:  # char first move
                    first_stroke = False
                    # lift engraver, rapid to start of stroke, drop tool
                    if firstMove == False:  # the very first move
                            gcode.append('G0 Z%s' % (rapidZ))
                    if typeOfEngraving == 0:  # normal text
                            gcode.append('o<rotate-xy> CALL [%f * #<XScale>] [%f * #<YScale>] [%f] [%f] [%s]' % (x1, y1, 0, 0, Angle))  # rotate and scale text
                            gcode.append('G0 X[#<_rotate_result_x>  + #<xref> + %s] Y[#<_rotate_result_y> + #<yref> + %s]' % (XStart, YStart))  # move to start of stroke + start point
                    if typeOfEngraving > 0:  # text on arc
                            gcode.append('o<rotate-xy> CALL [%f * #<XScale>] [%f * #<YScale>] [%f] [%f] [%s + 270 + #<fi> - #<fi_char> + %s]' % (x1, y1, 0, 0, arcAngle, Angle))
                            gcode.append('G0 X[#<_rotate_result_x> + #<xr> + %s] Y[#<_rotate_result_y> + #<yr> + %s]' % (XStart, YStart))
                    if firstMove == True:  # very first move
                            gcode.append('G0 Z%s' % (rapidZ))
                            firstMove = False        
                    gcode.append("G0 Z%s" % (CutStartZ))
                    gcode.append("G1 Z%s F%s" % (Depth, verticalFeed))

                x2 = stroke.xend
                y2 = stroke.yend
                if Mirror == 1:
                    x2 = char_width - x2
                if Flip == 1:
                    y2 = font_line_height - y2

                if typeOfEngraving == 0:  # normal text
                        x2 += xoffset  # + lineOffsets[visit]
                        y2 -= (visit * (font_line_height * YLineOffset))
                        gcode.append('o<rotate-xy> CALL [%f * #<XScale>] [%f * #<YScale>] [%f] [%f] [%s]' % (x2, y2, 0, 0, Angle))
                        gcode.append('G1 X[#<_rotate_result_x> + #<xref> + %s] Y[#<_rotate_result_y> + #<yref> + %s] F%s' % (XStart, YStart, feed))
                if typeOfEngraving > 0:  # text on arc
                        gcode.append('o<rotate-xy> CALL [%f * #<XScale>] [%f * #<YScale>] [%f] [%f] [%s + 270 + #<fi> - #<fi_char> + %s]' % (x2, y2, 0, 0, arcAngle, Angle))
                        gcode.append('G1 X[#<_rotate_result_x> + #<xr> + %s] Y[#<_rotate_result_y> + #<yr> + %s] F%s' % (XStart, YStart, feed))


                oldx, oldy = stroke.xend, stroke.yend

            # move over for next character
            xoffset += font_char_space + char_width

        except KeyError:
           gcode.append("(DEBUG, warning: character '%s' not found in font defn)" % char.encode("utf-8"))
           xoffset += font_word_space

        gcode.append("")  # blank line after every char block

    gcode.append('G0 Z%s' % rapidZ)  # final engraver up

    # finish up with icing
    if last:
        gcode.append('G0 Z%s' % SafeZ)  # final engraver up
        gcode.append(Postamble)

    for line in gcode:
            sys.stdout.write('      ' + line + '\n')

################################################################################################################

def help_message():
    print '''engrave-feature.py G-Code Engraving Generator for NativeCAM
                
            (C) Mit Zot 2018
            based upon code from engrave-lines.py
            (C) ArcEye <2012> 
            based upon code from engrave-11.py 
            Copyright (C) <2008>  <Lawrence Glaister> <ve7it at shaw dot ca>'''

    print '''engrave-lines.py -X -x -i -Y -y -S -s -Z -r -D -C -W -M -F -P -p -0'''
    sys.exit(0)

#===============================================================================================================

def main():

    debug = 0
    # need to declare the globals because we want to write to them
    # otherwise python will create a local of the same name and
    # not change the global - stupid python
    global SafeZ
    global CutStartZ
    global XStart
    global XLineOffset
    global XIndentList
    global YStart
    global YLineOffset
    global Depth
    global XScale
    global YScale
    global CSpaceP
    global WSpaceP
    global Angle
    global Mirror
    global Flip
    global Preamble
    global Postamble
    global stringlist
    global fontfile
    global font
    global arcAngle
    global arcRadius
    global referencedBy
    global typeOfEngraving
    global textAlign
    global approxAngle
    global lineWidths
    global lineOffsets
    global Xref
    global Yref
    global font_line_height
    global font_word_space
    global font_char_space
    global charHeight
    global charWidth
    global arcAngle
    global rapidZ
    global verticalFeed
    global feed
    global self_id

    try:
        options, xarguments = getopt.getopt(sys.argv[1:], 'hd:n:X:x:i:Y:y:S:s:Z:V:z:v:D:C:W:M:F:f:P:p:L:A:R:r:a:b:t:e:g:0:1:2:3:4:5:6:7:8:9:')
    except getopt.error:
        print 'Error: You tried to use an unknown option. Try `engrave-lines.py -h\' for more information.'
        sys.exit(0)

    if len(sys.argv[1:]) == 0:
        help_message()
        sys.exit(0)

    for a in options[:]:
        if a[0] == '-h':
            help_message()
            sys.exit(0)
#  hidden debug option for testing
    for a in options[:]:
        if a[0] == '-d' and a[1] != '':
            debug = int(a[1])
            print'debug set to %d' % (debug)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-X' and a[1] != '':
            XStart = (a[1])
            if debug:
                print'X = %.4f' % (XStart)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-x' and a[1] != '':
            XLineOffset = float(a[1])
            if debug:
                print'x = %.4f' % (XLineOffset)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-i' and a[1] != '':
            XIndentList = a[1]
            if debug:
                print'i = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-Y' and a[1] != '':
            YStart = (a[1])
            if debug:
                print'Y = %.4f' % (YStart)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-y' and a[1] != '':
            YLineOffset = float(a[1])
            if debug:
                print'y = %.4f' % (YLineOffset)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-S' and a[1] != '':
            charWidth = (a[1])
            if debug:
                print'S = %.4f' % (XScale)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-s' and a[1] != '':
            charHeight = (a[1])
            if debug:
                print's = %.4f' % (YScale)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-Z' and a[1] != '':
            SafeZ = (a[1])
            if debug:
                print'Z = %.4f' % (SafeZ)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-V' and a[1] != '':
            verticalFeed = (a[1])
            if debug:
                print'V = %.4f' % (SafeZ)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-z' and a[1] != '':
            rapidZ = (a[1])
            if debug:
                print'z = %.4f' % (SafeZ)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-v' and a[1] != '':
            feed = (a[1])
            if debug:
                print'v = %.4f' % (SafeZ)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-b' and a[1] != '':
            CutStartZ = (a[1])
            if debug:
                print'b = %.4f' % (Depth)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-D' and a[1] != '':
            Depth = (a[1])
            if debug:
                print'D = %.4f' % (Depth)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-C' and a[1] != '':
            CSpaceP = float(a[1])
            if debug:
                print'C = %.4f' % (CSpaceP)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-W' and a[1] != '':
            WSpaceP = float(a[1])
            if debug:
                print'W = %.4f' % (WSpaceP)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-A' and a[1] != '':
            Angle = (a[1])
            if debug:
                print'A = %.4f' % (Angle)
            options.remove(a)
            break


    for a in options[:]:
        if a[0] == '-M' and a[1] != '':
            Mirror = float(a[1])
            if debug:
                print'M = %.4f' % (Mirror)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-F' and a[1] != '':
            Flip = float(a[1])
            if debug:
                print'F = %.4f' % (Flip)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-f' and a[1] != '':
            fontfile = (a[1])
            if debug:
                print'f = %s' % (fontfile)
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-P' and a[1] != '':
            Preamble = a[1]
            if debug:
                print'P = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-p' and a[1] != '':
            Postamble = a[1]
            if debug:
                print'p = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-R' and a[1] != '':
            referencedBy = int(a[1])
            if debug:
                print'R = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-r' and a[1] != '':
            arcRadius = a[1]
            if debug:
                print'r = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-a' and a[1] != '':
            arcAngle = a[1]
            if debug:
                print'a = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-t' and a[1] != '':
            typeOfEngraving = int(a[1])
            if debug:
                print't = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-e' and a[1] != '':
            approxAngle = float(a[1])
            if debug:
                print'e = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-g' and a[1] != '':
            textAlign = int(a[1])
            if debug:
                print'g = %s' % (a[1])
            options.remove(a)
            break

    for a in options[:]:
        if a[0] == '-0' and a[1] != '':
            str=a[1].splitlines()
            for line in str:
              stringlist.append(line.decode("utf-8").rstrip())
            if debug:
                print'0 = %s' % (a[1])
            options.remove(a)
            break
            
    for a in options[:]:
        if a[0] == '-n' and a[1] != '':
            self_id = a[1]
            if debug:
                print'n = %s' % (a[1])
            options.remove(a)
            break


    file = open(fontfile)
    font = parse(file)  # build stroke lists from font file
    file.close()

    font_line_height = font['A'].get_ymax()  # using letter A as base for calculating text size
    font_word_space = font['A'].get_xmax() * WSpaceP
    font_char_space = font_word_space * CSpaceP


    numLines = 0
    for index, item in enumerate(stringlist):  # String lentghs for calculating offsets for alignment
        lineWidths.append(0)
        if item != " ":  # unused line is not really empty - every line contains at least one space char
                numLines = index + 1  # count also empty lines
                for char in item:
                 try:
                   if char == ' ':
                        lineWidths[index] += font_word_space
                        continue
                   lineWidths[index] += font[char].get_xmax()
                 except Exception:
                    sys.stdout.write("(debug, warning: engrave-feature.py: character %s not found in font dfinition, continue with NC Start)\nM0\n" % (char.encode("utf-8")))
                lineWidths[index] += font_char_space * (len(item) - 1)

    maxLineWidth = lineWidths[lineWidths.index(max(lineWidths))]


    for index, item in enumerate(lineWidths):
                if textAlign == 1:  # align left
                        lineOffsets.append(0)
                if textAlign == 0:  # align center
                        lineOffsets.append(((maxLineWidth / 2 - lineWidths[index] / 2)))
                if textAlign == 2:  # align right
                        lineOffsets.append((maxLineWidth - lineWidths[index]))

    textHeight = (numLines - 1) * font_line_height * YLineOffset + font_line_height

    if referencedBy == 0:  # referenced by top left corner
        Xref = 0
        Yref = font_line_height
    if referencedBy == 1:  # referenced by top center of text
        Xref = (font_word_space + font_char_space) / 2 - maxLineWidth / 2
        Yref = font_line_height
    if referencedBy == 2:  # referenced by top right corner
        Xref = font_word_space + font_char_space - maxLineWidth
        Yref = font_line_height
    if referencedBy == 3:  # referenced by right center of text
        Xref = font_word_space + font_char_space - maxLineWidth
        Yref = (font_line_height - (textHeight) / 2)
    if referencedBy == 4:  # referenced by lower right corner
        Xref = font_word_space + font_char_space - maxLineWidth
        Yref = font_line_height - textHeight
    if referencedBy == 5:  # referenced by lower center of text
        Xref = (font_word_space + font_char_space) / 2 - maxLineWidth / 2
        Yref = font_line_height - textHeight
    if referencedBy == 6:  # referenced by lower left corner
        Xref = 0
        Yref = font_line_height - textHeight
    if referencedBy == 7:  # referenced by left center of text
        Xref = 0
        Yref = (font_line_height - (textHeight) / 2)
    if referencedBy == 8:  # referenced by center of text
        Xref = (font_word_space + font_char_space) / 2 - maxLineWidth / 2
        Yref = (font_line_height - (textHeight) / 2)


    for index, item in enumerate(stringlist):  # make the G-Code
        code(item, index, index == (len(stringlist) - 1))


#===============================================================================================

if __name__ == "__main__":
            main()

#===============================================================================================END
